parameters:
  - name: Matrix
    type: object
  - name: TestTask
    type: object
  - name: MaxParallel
    type: number
    default: 0
  - name: Timeout
    type: number
    default: 30
  - name: Daily
    type: boolean
    default: true
  - name: Artifacts
    type: object
    default: []
  - name: ArtifactName
    type: string
    default: ""

jobs:
  - ${{ if eq(parameters.Daily, false) }}:
    - job: smoke_test_eligibility
      pool:
        vmImage: ubuntu-18.04
      displayName: Check Smoke Test Eligibility
      steps:
        # pipelines only supports template each when it generates the entire script block.
        - ${{ each artifact in parameters.Artifacts }}:
          - ${{ if and(ne(variables['Skip.Release'], 'true'), ne(artifact.skipPublishPackage, 'true')) }}:
            - pwsh: |
                Set-PSDebug -Trace 2
                [xml]$pom = Get-Content ./common/smoke-tests/pom.xml
                $deps = $pom.project.dependencies.GetEnumerator() | ForEach-Object { $_.artifactId }
                if ($deps.Contains("${{ artifact.name }}")) {
                  Write-Host "Smoke tests will run for ${{ artifact.name }}"
                  Write-Host "##vso[task.setvariable variable=RunSmokeTests]true"
                } else {
                  Write-Host "Smoke tests will NOT run for ${{ artifact.name }}"
                }
              name: check_smoke_tests_${{ artifact.safeName }}
              displayName: Check smoke test eligibility for ${{ artifact.name }}
        - pwsh: |
            Write-Host "Setting RunSmokeTests to ${env:RunSmokeTests}"
            Write-Host "##vso[task.setvariable variable=RunSmokeTests;isOutput=true]${env:RunSmokeTests}"
          name: output_eligibility
          env:
            RunSmokeTests: $(RunSmokeTests)

  - job: SmokeTest
    ${{ if eq(parameters.Daily, false) }}:
      dependsOn: smoke_test_eligibility
      condition: and(succeeded(), eq(dependencies.smoke_test_eligibility.outputs['output_eligibility.RunSmokeTests'], true))
    timeoutInMinutes: ${{ parameters.Timeout }}

    strategy:
      maxParallel: ${{ parameters.MaxParallel }}
      matrix: ${{ parameters.Matrix }}

    pool:
      vmImage: $(OSVmImage)

    variables:
      azureCloudArmParameters: "@{ storageEndpointSuffix = 'core.windows.net'; azureCloud = 'AzureCloud'; }"
      azureUSGovernmentArmParameters: "@{ storageEndpointSuffix = 'core.usgovcloudapi.net'; azureCloud = 'AzureUSGovernment'; }"
      azureChinaCloudArmParameters: "@{ storageEndpointSuffix = 'core.chinacloudapi.cn'; azureCloud = 'AzureChinaCloud'; }"


    steps:
      - ${{ if eq(parameters.Daily, false) }}:
        - download: current
          artifact: ${{ parameters.ArtifactName }}
          timeoutInMinutes: 5

        - ${{ each artifact in parameters.Artifacts }}:
          - ${{ if and(ne(variables['Skip.Release'], 'true'), ne(artifact.skipPublishPackage, 'true')) }}:
            - pwsh: |
                $artifactsPath = Join-Path "$(Pipeline.Workspace)" "${{ parameters.ArtifactName }}" "${{ artifact.groupId }}"

                if (!(Test-Path $packagePath)) {
                  throw "Expected $packagePath to exist"
                }

                $pkg = Get-ChildItem "$artifactsPath/${{ parameters.artifact.name }}/*.pom" | Select-Object -First 1
                [xml]$packagePom = Get-Content $pkg
                $releaseVersion = $packagePom.project.version

                [xml]$smokeTestPom = Get-Content ./common/smoke-tests/pom.xml
                $smokeTestPom.project.dependencies.GetEnumerator() |
                Where-Object { $_.artifactId -eq "${{ artifact.name }}" }
                ForEach-Object {
                  $_.version = $releaseVersion
                }
                $smokeTestPom.Save(./common/smoke-tests/pom.xml)
              name: Set_${{ artifact.safeName }}_version

        - task: Maven@3
          displayName: Use the latest GA/beta package versions
          inputs:
            mavenPomFile: $(PomFile)
            goals: 'versions:use-latest-versions -Dmaven.version.rules="file:///${project.basedir}/exclude-daily-rules.xml"'
            options: '$(DefaultOptions) --no-transfer-progress -DskipTests "-Dincludes=com.azure:*"'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: $(JavaTestVersion)
            jdkArchitectureOption: 'x64'
            publishJUnitResults: false
      - ${{ if eq(parameters.Daily, true) }}:
        - task: Maven@3
          displayName: Use the latest daily package versions
          inputs:
            mavenPomFile: $(PomFile)
            goals: 'versions:use-latest-versions'
            options: '$(DefaultOptions) --no-transfer-progress -DskipTests "-Dincludes=com.azure:*"'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: $(JavaTestVersion)
            jdkArchitectureOption: 'x64'
            publishJUnitResults: false


      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      - task: PythonScript@0
        inputs:
          scriptPath: common/smoke-tests/validate_version_dates.py
          workingDirectory: common/smoke-tests
        continueOnError: true
        displayName: Validate consistent dependency dev versions for com.azure packages

      - pwsh: Get-Content $(PomFile)
        displayName: Show pom.xml

      - task: Maven@3
        displayName: Show dependency tree
        inputs:
          mavenPomFile: $(PomFile)
          goals: 'dependency:tree'
          options: '$(DefaultOptions) --no-transfer-progress -DskipTests'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaTestVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - task: Maven@3
        displayName: 'Build and Package'
        inputs:
          mavenPomFile: $(PomFile)
          goals: 'package'
          options: '$(DefaultOptions) --no-transfer-progress -DskipTests'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaTestVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - template: /eng/common/TestResources/deploy-test-resources.yml
        parameters:
          ServiceDirectory: $(ServiceDirectory)
          ArmTemplateParameters: $(ArmTemplateParameters)
          SubscriptionConfiguration: $(SubscriptionConfiguration)

      - ${{ parameters.TestTask }}

      - template: /eng/common/TestResources/remove-test-resources.yml
        parameters:
          ServiceDirectory: '$(Build.SourcesDirectory)/common/smoke-tests/'
          SubscriptionConfiguration: $(SubscriptionConfiguration)
